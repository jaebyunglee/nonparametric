rm(list=ls())
n = 200
iter = 500
e.vec = c(rep(0,iter))
##################################################################################################
##################################################################################################
##################################################################################################
hh = (0.282095/0.02)^(1/5)*n^(-1/5)
1/(n*hh)*0.282095+1/4*hh^4*0.02
##################################################################################################
########################################using density function####################################
##################################################################################################

for(k in 1:iter){
#data
id = split(sample(n),1:3)
x1 = rnorm(n,1.5,1)
x2 = rnorm(n,-1.5,1)
x3 = rnorm(n,0,1)
data = c(x1[id[[1]]],x2[id[[2]]],x3[id[[3]]])  

#f.hat
d = density(data, from = -4.5, to = 4.5, n = 91) 
#f(x)
 f.fun1 = function(x){
  (1/3)*(1/sqrt(2*pi))*(exp(-((x+1.5)^2)/2)+exp(-((x)^2)/2)+exp(-((x-1.5)^2)/2))}

#sum of square
e.vec[k] = sum((d$y - f.fun1(seq(-4.5,4.5,0.1)))^2) 
}
mean(e.vec)
library(ggplot2)
ggplot()+geom_line(aes(d$x,d$y))+geom_line(col="red",aes(d$x,f.fun1(seq(-4.5,4.5,0.1))))
#################################################################################################
###################################using kernel density##########################################
#################################################################################################
for(j in 1:iter){
  #data
  id = split(sample(n),1:3)
  x1 = rnorm(n,1.5,1)
  x2 = rnorm(n,-1.5,1)
  x3 = rnorm(n,0,1)
  data = c(x1[id[[1]]],x2[id[[2]]],x3[id[[3]]])  

  #####################f.hat-f(x) function######################
   f.fun2 = function(x,h){
    #f(x)
    f = (1/3)*(1/sqrt(2*pi))*(exp(-((x+1.5)^2)/2)+exp(-((x)^2)/2)+exp(-((x-1.5)^2)/2))
    
    #f.hat
    q = 0
    for(i in 1:n){
      q = q + (1/sqrt(2*pi))*exp((-1/2)*((x-data[i])/h)^2)   
    }
    #f.hat-f(x)
    k = (q/(n*h))-f
    return(k^2)
  }
  
  #######################find h.opt#############################
  m = seq(0.01,1,0.01) 
  h.mat = matrix(rep(0,length(m)*2),length(m),2)
  colnames(h.mat) = c("h","sum of squared error")
  for(k in m){
    value = f.fun2(seq(-4.5,4.5,0.1),k)
    #sum of squared error
    
    h.mat[k*100,2] = sum(value)
    h.mat[k*100,1] = k
   }
  pos = which.min(h.mat[-7,2])
  ##############################################################
  #h.opt
  h.mat[pos,]
  #sum of squared error
  sum.of.square = sum(f.fun2(seq(-4.5,4.5,0.1),h.mat[pos,][1]))
  
  #Final value
  e.vec[j] = sum.of.square

}
plot(h.mat[,1],h.mat[,2], xlab = "h", ylab = "sum of square",ylim = c(0,0.5))
mean(e.vec)
##################################################################################
###################using kernel density with optimise function####################
##################################################################################
for(j in 1:iter){
  #data
  id = split(sample(n),1:3)
  x1 = rnorm(n,1.5,1)
  x2 = rnorm(n,-1.5,1)
  x3 = rnorm(n,0,1)
  data = c(x1[id[[1]]],x2[id[[2]]],x3[id[[3]]])  
  
  #####################f.hat-f(x) function######################
  f.fun3 = function(h){
    x = seq(-4.5,4.5,0.1)
    f = (1/3)*(1/sqrt(2*pi))*(exp(-((x+1.5)^2)/2)+exp(-((x)^2)/2)+exp(-((x-1.5)^2)/2))
    
    #f.hat
    q = 0
    for(i in 1:n){
      q = q + (1/sqrt(2*pi))*exp((-1/2)*((x-data[i])/h)^2)   
    }
    #f.hat-f(x)
    k = sum((((q/(n*h))-f)^2))
    return(k)
  }
  ##############################################################
  #h.opt
  h.opt = optimize(f.fun3,interval = c(0,1))
  #sum of squared error
  sum.of.square = f.fun3(h.opt$minimum)
  
  #Final value
  e.vec[j] = sum.of.square
}
mean(e.vec)
####################################################################################################
###############################compare f.hat with f(x) graph########################################
####################################################################################################
fx.fun = function(x){
  f = (1/3)*(1/sqrt(2*pi))*(exp(-((x+1.5)^2)/2)+exp(-((x)^2)/2)+exp(-((x-1.5)^2)/2))
  return(f)
}

fh.fun = function(x,h){
  q = 0
  for(i in 1:n){
    q = q + (1/sqrt(2*pi))*exp((-1/2)*((x-data[i])/h)^2)   
  }
  return(q/(n*h))
}


plot(seq(-4.5,4.5,0.1),fx.fun(seq(-4.5,4.5,0.1)),type="l")
lines(seq(-4.5,4.5,0.1),fh.fun(seq(-4.5,4.5,0.1),h.opt$minimum),col="red")

